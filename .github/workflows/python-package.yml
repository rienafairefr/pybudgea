name: Python package

on: [push, pull_request]

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - uses: snok/install-poetry@v1
      - name: Install dependencies
        run: poetry install
      - name: generate code
        run: make api
      - uses: actions/upload-artifact@master
        with:
          name: generated-api
          path: api

  test:
    needs: generate
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.6", "3.7", "3.8", "3.9", '3.10']

        include:
          - os: ubuntu-20.04
            python-version: 3.5
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - uses: snok/install-poetry@v1
      with:
        version: 1.1.13
    - name: Install dependencies
      run: poetry install

    - uses: actions/download-artifact@master
      with:
        name: generated-api
        path: api

    - name: install Package under test
      run: |
        poetry add ./api
        poetry run pip freeze
    - name: Test with pytest
      run: poetry run pytest --cov=api
    - name: Coveralls
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.coveralls_repo_token }}
      run: poetry run coveralls

  publish:
    needs:
      - test
      - generate
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: 3.8
    - uses: snok/install-poetry@v1
    - name: Install dependencies
      run: poetry install

    - uses: actions/download-artifact@master
      with:
        name: generated-api
        path: api

    - name: Build package
      run: |
        cd api
        poetry run python setup.py sdist bdist_wheel
    - name: Twine check
      run: poetry run twine check api/dist/*
    - name: test upload
      if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.testpypi_password }}
      run: |
        poetry run twine upload --repository-url https://test.pypi.org/legacy/ api/dist/*
    - name: Publish package
      if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.pypi_password }}
      run: |
        poetry run twine upload api/dist/*


  cleanup_job:
    needs: publish
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: call webhook to delete artifacts
      env:
        FOR_WEBHOOKS_SECRET: ${{ secrets.FOR_WEBHOOKS_SECRET }}
      run: |
        echo "::add-mask::$FOR_WEBHOOKS_SECRET"
        curl --verbose --fail --show-error --location --request POST "https://api.github.com/repos/$GITHUB_REPOSITORY/dispatches" --header "Authorization: token $FOR_WEBHOOKS_SECRET" --header 'Content-Type: application/json' --header 'Accept: application/vnd.github.everest-preview+json' --data-raw "{ \"event_type\": \"delete_all_artifacts\", \"client_payload\": {\"parent_runid\": \"$GITHUB_RUN_ID\", \"parent_repo\": \"$GITHUB_REPOSITORY\"} }"
